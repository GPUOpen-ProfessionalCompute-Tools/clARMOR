#This libgomp patch is based off the patch provided as part of CALDGEMM
#https://github.com/davidrohr/hpl-gpu/wiki/Howto
#Libgomp is GPLv3 licensed with the GCC Runtime Library Exception.
--- ../old/libgomp/team.c	2014-01-02 16:25:54.000000000 -0600
+++ ./libgomp/team.c	2016-04-29 16:18:08.609165334 -0500
@@ -29,6 +29,8 @@
 #include <stdlib.h>
 #include <string.h>
 
+#define GOMP_KEEP_THREAD ((void*) (size_t) -1)
+
 /* This attribute contains PTHREAD_CREATE_DETACHED.  */
 pthread_attr_t gomp_thread_attr;
 
@@ -118,11 +120,18 @@
 	  gomp_team_barrier_wait_final (&team->barrier);
 	  gomp_finish_task (task);
 
-	  gomp_barrier_wait (&pool->threads_dock);
+      do
+      {
+          gomp_barrier_wait (&pool->threads_dock);
+          local_fn = thr->fn;
+          thr->fn = NULL;
+          if (local_fn == GOMP_KEEP_THREAD)
+          {
+              gomp_team_barrier_wait(&thr->ts.team->barrier);
+          }
+      } while (local_fn == GOMP_KEEP_THREAD);
 
-	  local_fn = thr->fn;
 	  local_data = thr->data;
-	  thr->fn = NULL;
 	}
       while (local_fn);
     }
@@ -278,7 +287,7 @@
   struct gomp_task_icv *icv;
   bool nested;
   struct gomp_thread_pool *pool;
-  unsigned i, n, old_threads_used = 0;
+  unsigned i, j, n, old_threads_used = 0;
   pthread_attr_t thread_attr, *attr;
   unsigned long nthreads_var;
   char bind, bind_var;
@@ -607,6 +616,17 @@
 	  team->ordered_release[i] = &nthr->release;
 	}
 
+      if (nthreads < old_threads_used)
+      {
+          for (j = i;j < old_threads_used;j++)
+          {
+              nthr = pool->threads[j];
+              nthr->fn = GOMP_KEEP_THREAD;
+              nthr->ts.team = team;
+          }
+          gomp_barrier_reinit (&team->barrier, old_threads_used);
+      }
+
       if (__builtin_expect (affinity_thr != NULL, 0))
 	{
 	  /* If AFFINITY_THR is non-NULL just because we had to
@@ -811,8 +831,8 @@
      set to NTHREADS + AFFINITY_COUNT.  For NTHREADS < OLD_THREADS_COUNT,
      AFFINITY_COUNT if non-zero will be always at least
      OLD_THREADS_COUNT - NTHREADS.  */
-  if (__builtin_expect (nthreads < old_threads_used, 0)
-      || __builtin_expect (affinity_count, 0))
+  if ((nested) && (__builtin_expect (nthreads < old_threads_used, 0)
+      || __builtin_expect (affinity_count, 0)))
     {
       long diff = (long) nthreads - (long) old_threads_used;
 
@@ -828,6 +848,7 @@
       gomp_managed_threads += diff;
       gomp_mutex_unlock (&gomp_managed_threads_lock);
 #endif
+      if (!nested && old_threads_used > nthreads) pool->threads_used = old_threads_used;
     }
   if (__builtin_expect (affinity_thr != NULL, 0)
       && team->prev_ts.place_partition_len > 64)
